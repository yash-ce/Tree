/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        bool res = true;
        queue<TreeNode*> q;
        q.push(root);
        int height = 0;
        while(!q.empty()){
            int size = q.size();
            vector<int> v;
            for(int i=0;i<size;i++){
                TreeNode* node = q.front();
                q.pop();
                v.push_back(node->val);
                if(node->left != NULL){
                    q.push(node->left);
                }
                if(node->right != NULL){
                    q.push(node->right);
                }
                
            }
            bool flag = true;
            if(height%2 == 0){
                // bool flag1 = true;
                
                for(int key =0;key<v.size()-1;key++){
                    if(v[key]%2 == 0 || v[key] >= v[key+1]){
                        flag = false;
                        break;
                    }
                }
                if(v[v.size()-1]%2 == 0){
                    flag = false;
                }
                
                
            }
            
            if(height%2 != 0){
                // bool flag2 = true;
                for(int key =0;key<v.size()-1;key++){
                    if(v[key]%2 != 0 || v[key] <= v[key+1]){
                        flag = false;
                        break;
                    }
                }
                if(v[v.size()-1]%2!=0){
                    flag = false;
                }
                
            }
            
            if(flag == false){
                res = false;
                break;
            }
            
            
            height++;
            
            }
        
            return res;
        
    }
};
