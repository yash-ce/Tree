//https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1/

class Solution {
public:
    bool isLeaf(Node* root){
        return !(root->left) && !(root->right);
    }
    void addLeftBoundry(Node* root, vector<int> &res){
        Node* curr = root->left;
        while(curr){
            if(!isLeaf(curr)) res.push_back(curr->data);
            if(curr->left) curr = curr->left;
            else curr = curr->right;
        }
    }
    
    void addLeafNodes(Node* root, vector<int> &res){
        if(isLeaf(root)){
            res.push_back(root->data);
            return;
        }
        if(root->left){
            addLeafNodes(root->left, res);
        }
        if(root->right){
            addLeafNodes(root->right, res);
        }
        
        
    }
    void addRightBoundry(Node* root, vector<int> &res){
        Node* curr = root->right;
        vector<int> temp;
        while(curr){
            if(!isLeaf(curr)) temp.push_back(curr->data);
            if(curr->right) curr = curr->right;
            else curr = curr->left;
        }
        for(int i=temp.size()-1;i>=0;i--){
            res.push_back(temp[i]);
        }
    }
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int> res;
        if(root == NULL){
            return res;
        }
        if(!isLeaf(root)){
            res.push_back(root->data);
        }
        addLeftBoundry(root, res);
        addLeafNodes(root, res);
        addRightBoundry(root, res);
        return res;
    }
};
