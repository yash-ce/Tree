/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int idx=  0;
    unordered_map<int, int> m;
    TreeNode* solve(int pre[], int in[], int lb, int ub){
        if(lb> ub) return NULL;
        TreeNode* res = new TreeNode(pre[idx++]);
        if(lb == ub) return res;
        int mid = m[res->val];
        res->left = solve(pre, in, lb, mid-1);
        res->right = solve(pre, in, mid+1, ub);
        return res;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        idx = 0;
        m.clear();
        int in[inorder.size()];
        for(int i=0;i<inorder.size();i++){
            in[i] = inorder[i];
        }
        int pre[preorder.size()];
        for(int i=0;i<preorder.size();i++){
            pre[i] = preorder[i];
        }
        for(int i=0;i<preorder.size();i++) m[in[i]] = i;
        TreeNode* root = solve(pre, in, 0, preorder.size()-1);
        return root;
    }
};
