struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

// return the Kth largest element in the given BST rooted at 'root'
class Solution
{
    public:
    int kthLargest(Node *root, int K)
    {
        //Your code here
        // add code here.
         int res = -1;
        queue<Node*> q;
        q.push(root);
        vector<long long int> all;
        while(!q.empty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                Node* node = q.front();
                q.pop();
                
                if(node->left != NULL){
                    q.push(node->left);
                }
                if(node->right != NULL){
                    q.push(node->right);
                }
                all.push_back(node->data);
            }
            
        }
        sort(all.begin(), all.end());
        reverse(all.begin(), all.end());
        if(K <= all.size()){
            return all[K-1]; 
        }
        else{
            return -1;
        }
        
    }
};
